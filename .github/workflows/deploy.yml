# 워크플로우의 이름
name: Build and Deploy to EC2 using AWS ECR

# 이 워크플로우가 언제 실행될지 정의
on:
  push:
    # master 브랜치에 push 이벤트가 발생했을 때 실행
    branches: [ "master" ]

jobs:
  # =====================================================
  # 첫 번째 작업: Docker 이미지 빌드 및 ECR에 푸시
  # =====================================================
  build:
    # 이 작업이 실행될 가상 서버 환경을 지정 (최신 우분투)
    runs-on: ubuntu-latest
    # 이 job의 결과를 다른 job에서 사용할 수 있도록 outputs을 설정합니다.
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      # 1. GitHub 저장소의 코드를 가상 서버로 내려받음 (Checkout)
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          lfs: true

      # 2. AWS 서비스에 접근하기 위한 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. AWS ECR에 로그인
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      # 4. Docker 이미지를 빌드하고 ECR로 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: web-search-app # 사용자 ECR 리포지토리 이름
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker 이미지 빌드 (commit-sha 태그와 latest 태그 동시 적용)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./CLIP-web-search-app_v1.1
          
          # 두 개의 태그를 ECR로 한번에 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          
          # 다음 deploy job에서 사용할 이미지 이름(latest 태그 사용)을 출력으로 설정
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

  # =====================================================
  # 두 번째 작업: EC2에 배포
  # =====================================================
  deploy:
    # 'build' 작업이 성공적으로 끝나야만 이 작업을 시작합니다.
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1. EC2 스크립트에서 AWS 명령어를 사용하기 위해 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 2. EC2에 원격 접속하여 배포 스크립트 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 서버에서 실행될 명령어들:

            # build job에서 전달받은 이미지 이름을 변수로 명확하게 지정
            IMAGE_TO_PULL="${{ needs.build.outputs.image }}"
            ECR_REGISTRY=$(echo $IMAGE_TO_PULL | cut -d'/' -f1)

            # 1. EC2 서버에서 ECR 로그인
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

            # 2. 최신 Docker 이미지 받아오기
            docker pull $IMAGE_TO_PULL

            # 3. 기존 컨테이너 중지 및 삭제
            docker stop my-ai-app-container || true
            docker rm my-ai-app-container || true

            # 4. 새로 받은 이미지로 컨테이너 실행 (80번 포트와 8080 포트 연결)
            docker run -d --name my-ai-app-container -p 80:8080 $IMAGE_TO_PULL
            
            # 5. 불필요한 Docker 이미지 정리 (서버 용량 관리)
            docker image prune -af