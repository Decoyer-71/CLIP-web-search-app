# 워크플로우 이름(학습목적으로 ec2 보안그룹은 열어둠)
name: Deploy to AWS EC2

# 실행 조건: master 브랜치에 push 이벤트 발생 시
on:
  push:
    branches: [ "master" ]

jobs:
  # 'deploy' 라는 이름의 작업 정의
  deploy:
    # 이 작업이 실행될 가상 서버 환경 지정
    runs-on: ubuntu-latest

    steps:
      # 1. AWS 자격 증명 구성 (EC2 접속을 위해)
      # GitHub Secrets에 AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY 등을 미리 등록
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      # 2. EC2에 SSH로 원격 접속하여 배포 스크립트 실행
      # GitHub Secrets에 EC2_HOST, EC2_USER, EC2_SSH_KEY 등을 미리 등록
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 서버에서 실행될 명령어들:
            
            # 1. GHCR에 로그인 (EC2 서버가 private 이미지를 받아올 수 있도록)
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 2. 최신 Docker 이미지 받아오기
            # ghcr.io/계정명/저장소명:커밋해시 형태로 이미지를 특정합니다.
            docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}

            # 3. 기존에 실행 중이던 컨테이너가 있다면 중지하고 삭제 (무중단 배포를 위해서는 blue-green, canary 등 고급 전략 필요)
            docker stop my-ai-app-container || true
            docker rm my-ai-app-container || true

            # 4. 새로 받은 이미지로 컨테이너 실행
            # -d: 백그라운드 실행, --name: 컨테이너 이름 지정, -p: 포트 연결 (예: EC2의 80번 포트와 컨테이너의 8080 포트 연결)
            docker run -d --name my-ai-app-container -p 80:8080 ghcr.io/${{ github.repository }}:${{ github.sha }}
            
            # 5. 불필요한 Docker 이미지 정리 (서버 용량 관리)
            docker image prune -af
